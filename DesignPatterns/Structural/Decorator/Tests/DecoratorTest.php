<?php
/**
 * Created by PhpStorm.
 * User: flytzuhan
 * Date: 2018/4/6
 * Time: 上午11:29
 */
namespace DesignPatterns\Structural\Decorator\Tests;


use DesignPatterns\Structural\Decorator\RenderInJson;
use DesignPatterns\Structural\Decorator\RenderInXml;
use DesignPatterns\Structural\Decorator\Webservice;

class DecoratorTest extends \PHPUnit_Framework_TestCase
{
    protected $service;

    protected function setUp()
    {
        // parent::setUp(); // TODO: Change the autogenerated stub
        $this->service = new Webservice( array( 'foo' => 'bar' ) );
    }

    public function testJsonDecorator()
    {
        // Wrap service with a JSON decorator for renderers.
        $service = new RenderInJson( $this->service );

        $this->assertEquals( '{"foo":"bar"}', $service->renderData() );
    }

    public function testXmlDecorator()
    {
        $service = new RenderInXml( $this->service );

        $xml = '<?xml version="1.0"?><foo>bar</foo>';

        $this->assertXmlStringEqualsXmlString( $xml, $service->renderData() );
    }

    public function testDecoratorMustImplementsRenderer()
    {
        $className = 'DesignPatterns\Structural\Decorator\Decorator';

        $interfaceName = 'DesignPatterns\Structural\Decorator\RendererInterface';

        $this->assertTrue( is_subclass_of( $className, $interfaceName ) );
    }

    /**
     * @requires PHP 7
     * @expectedException TypeError
     */
    public function testDecoratorTypeHintedForPhp7()
    {
        /*if ( version_compare( PHP_VERSION, '7', '>=' ) ) {
            throw new \PHPUnit_Framework_Error( 'Skip test for PHP 7', 0, __FILE__, __LINE__ );
        }*/

        $this->getMockForAbstractClass( 'DesignPatterns\Structural\Decorator\Decorator', array( new \stdClass() ) );
    }
}